Transform: AWS::LanguageExtensions
Parameters:
  UserNames:
    Default: user1,user2
    Type: CommaDelimitedList
Resources:
  Fn::ForEach::ScheduleLoop:
    - UserName
    - !Ref UserNames
    - Schedule&{UserName}:
        Type: AWS::Scheduler::Schedule
        Properties:
          Name: !Sub "job-scrape-${UserName}"
          ScheduleExpression: 'cron(0 6 ? * 2-6 *)'
          FlexibleTimeWindow:
            Mode: 'FLEXIBLE'
            MaximumWindowInMinutes: 30
          GroupName: 'job-scrape'
          ScheduleExpressionTimezone: America/New_York
          Target:
            Arn: arn:aws:lambda:<AWS REGION>:<AWS ACCOUNT NUMBER>:function:job-scrape
            Input: !Sub '{ "aws_config": { "username": "${UserName}", "bucket_name": "<BUCKET NAME>", "config_file":
              "${UserName}/config.py", "scrapers_file":
              "${UserName}/scrapers.py", "run_record_json":
              "${UserName}/run_record.json", "sns_topic_arn":
              "arn:aws:sns:<AWS REGION>:<AWS ACCOUNT NUMBER>:job-scrape-${UserName}", "execution_role_arn":
              "<ROLE ARN to assume within the lambda, with permission to read to bucket and publish to sns>" } }'
            RetryPolicy:
              MaximumEventAgeInSeconds: 600
              MaximumRetryAttempts: 2
            RoleArn: <LAMBDA ROLE ARN>
  Fn::ForEach::SnsLoop:
    - UserName
    - !Ref UserNames
    - SnsTopic&{UserName}:
        Type: AWS::SNS::Topic
        Properties:
          TopicName: !Sub job-scrape-${UserName}
